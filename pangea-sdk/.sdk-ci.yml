.go-sdk-base:
  before_script:
    - cd pangea-sdk/v3
    - go install github.com/boumenot/gocover-cobertura@latest
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

go-sdk-test-it:
  stage: integration_tests
  variables:
  # Set each service test environment
    SERVICE_AUDIT_ENV: LVE
    SERVICE_AUTHN_ENV: LVE
    SERVICE_EMBARGO_ENV: LVE
    SERVICE_FILE_SCAN_ENV: LVE
    SERVICE_IP_INTEL_ENV: LVE
    SERVICE_DOMAIN_INTEL_ENV: LVE
    SERVICE_URL_INTEL_ENV: LVE
    SERVICE_FILE_INTEL_ENV: LVE
    SERVICE_USER_INTEL_ENV: LVE
    SERVICE_REDACT_ENV: LVE
    SERVICE_VAULT_ENV: LVE
  before_script:
    - echo $ENV
    - echo $CLOUD
  # Update environment variables
  # Domain
    - export PANGEA_INTEGRATION_DOMAIN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_DOMAIN_${ENV}_${CLOUD})"
  # Tokens
    - export PANGEA_INTEGRATION_TOKEN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_TOKEN_${ENV}_${CLOUD})"
    - export PANGEA_INTEGRATION_VAULT_TOKEN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_VAULT_TOKEN_${ENV}_${CLOUD})"
    - export PANGEA_INTEGRATION_CUSTOM_SCHEMA_TOKEN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_CUSTOM_SCHEMA_TOKEN_${ENV}_${CLOUD})"
    - export PANGEA_INTEGRATION_MULTI_CONFIG_TOKEN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_MULTI_CONFIG_TOKEN_${ENV}_${CLOUD})"
  # Config IDs
    - export PANGEA_AUDIT_CONFIG_ID_1_${ENV}="$(eval echo \$PANGEA_AUDIT_CONFIG_ID_1_${ENV}_${CLOUD})"
    - export PANGEA_AUDIT_CONFIG_ID_2_${ENV}="$(eval echo \$PANGEA_AUDIT_CONFIG_ID_2_${ENV}_${CLOUD})"
    - export PANGEA_REDACT_CONFIG_ID_1_${ENV}="$(eval echo \$PANGEA_REDACT_CONFIG_ID_1_${ENV}_${CLOUD})"
    - export PANGEA_REDACT_CONFIG_ID_2_${ENV}="$(eval echo \$PANGEA_REDACT_CONFIG_ID_2_${ENV}_${CLOUD})"

    - cd pangea-sdk/v3
    - go install github.com/boumenot/gocover-cobertura@latest

  parallel:
    matrix:
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_AUDIT_ENV}
        TEST: audit
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_AUTHN_ENV}
        TEST: authn
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_EMBARGO_ENV}
        TEST: embargo
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_DOMAIN_INTEL_ENV}
        TEST: domain_intel
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_IP_INTEL_ENV}
        TEST: ip_intel
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_URL_INTEL_ENV}
        TEST: url_intel
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_USER_INTEL_ENV}
        TEST: user_intel
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_FILE_INTEL_ENV}
        TEST: file_intel
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_FILE_SCAN_ENV}
        TEST: file_scan
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_REDACT_ENV}
        TEST: redact
      - CLOUD: [AWS, GCP]
        ENV: ${SERVICE_VAULT_ENV}
        TEST: vault
  rules:
    - if: '$CLOUD == "GCP" && $TEST == "file_scan"'
      allow_failure: true
    - if: '$CLOUD == "GCP" && $TEST != "file_scan"'
      allow_failure: true
    - if: '$CLOUD != "GCP"'
      allow_failure: false
  script:
    - go test -count=1 -tags integration -v ./service/${TEST}/...

go-sdk-lint:
  extends: .go-sdk-base
  stage: lint
  script:
    - make verify

go-sdk-generate-docs:
  extends: .go-sdk-base
  stage: lint
  allow_failure: true
  script:
    - make docgen
  artifacts:
    expire_in: 1 month
    expose_as: go_sdk
    paths: ['pangea-sdk/v3/go_sdk.json']
    when: on_success

go-sdk-unit-testing:
  extends: .go-sdk-base
  stage: unit_tests
  script:
    - make unit
