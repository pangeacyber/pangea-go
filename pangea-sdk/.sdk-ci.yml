.sdk-base:
  before_script:
    - cd pangea-sdk
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

sdk-test-it:
  stage: integration_tests
  retry: 2
  variables:
    CLOUD: AWS

    # Set each service test environment
    SERVICE_AI_GUARD_ENV: LVE
    SERVICE_AUDIT_ENV: LVE
    SERVICE_AUTHN_ENV: LVE
    SERVICE_AUTHZ_ENV: LVE
    SERVICE_EMBARGO_ENV: LVE
    SERVICE_FILE_SCAN_ENV: LVE
    SERVICE_IP_INTEL_ENV: LVE
    SERVICE_DOMAIN_INTEL_ENV: LVE
    SERVICE_URL_INTEL_ENV: LVE
    SERVICE_FILE_INTEL_ENV: LVE
    SERVICE_USER_INTEL_ENV: LVE
    SERVICE_PROMPT_GUARD_ENV: LVE
    SERVICE_REDACT_ENV: LVE
    SERVICE_SANITIZE_ENV: LVE
    SERVICE_VAULT_ENV: LVE
    SERVICE_SHARE_ENV: LVE
  before_script:
    - echo $ENV
    - echo $CLOUD
    # Update environment variables
    # Domain
    - export PANGEA_INTEGRATION_DOMAIN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_DOMAIN_${ENV}_${CLOUD})"
    # Tokens
    - export PANGEA_INTEGRATION_TOKEN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_TOKEN_${ENV}_${CLOUD})"
    - export PANGEA_INTEGRATION_VAULT_TOKEN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_VAULT_TOKEN_${ENV}_${CLOUD})"
    - export PANGEA_INTEGRATION_CUSTOM_SCHEMA_TOKEN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_CUSTOM_SCHEMA_TOKEN_${ENV}_${CLOUD})"
    - export PANGEA_INTEGRATION_MULTI_CONFIG_TOKEN_${ENV}="$(eval echo \$PANGEA_INTEGRATION_MULTI_CONFIG_TOKEN_${ENV}_${CLOUD})"
    # Config IDs
    - export PANGEA_AUDIT_CONFIG_ID_1_${ENV}="$(eval echo \$PANGEA_AUDIT_CONFIG_ID_1_${ENV}_${CLOUD})"
    - export PANGEA_AUDIT_CONFIG_ID_2_${ENV}="$(eval echo \$PANGEA_AUDIT_CONFIG_ID_2_${ENV}_${CLOUD})"
    - export PANGEA_AUDIT_CONFIG_ID_3_${ENV}="$(eval echo \$PANGEA_AUDIT_CONFIG_ID_3_${ENV}_${CLOUD})"
    - export PANGEA_REDACT_CONFIG_ID_1_${ENV}="$(eval echo \$PANGEA_REDACT_CONFIG_ID_1_${ENV}_${CLOUD})"
    - export PANGEA_REDACT_CONFIG_ID_2_${ENV}="$(eval echo \$PANGEA_REDACT_CONFIG_ID_2_${ENV}_${CLOUD})"
    # Vault key ids
    - export PANGEA_INTEGRATION_FPE_KEY_ID_${ENV}="$(eval echo \$PANGEA_INTEGRATION_FPE_KEY_ID_${ENV}_${CLOUD})"

    - cd pangea-sdk

  parallel:
    matrix:
      - ENV: ${SERVICE_AI_GUARD_ENV}
        TEST: ai_guard
      - ENV: ${SERVICE_AUDIT_ENV}
        TEST: audit
      - ENV: ${SERVICE_AUTHN_ENV}
        TEST: authn
      - ENV: ${SERVICE_AUTHZ_ENV}
        TEST: authz
      - ENV: ${SERVICE_EMBARGO_ENV}
        TEST: embargo
      - ENV: ${SERVICE_DOMAIN_INTEL_ENV}
        TEST: domain_intel
      - ENV: ${SERVICE_IP_INTEL_ENV}
        TEST: ip_intel
      - ENV: ${SERVICE_URL_INTEL_ENV}
        TEST: url_intel
      - ENV: ${SERVICE_USER_INTEL_ENV}
        TEST: user_intel
      - ENV: ${SERVICE_FILE_INTEL_ENV}
        TEST: file_intel
      - ENV: ${SERVICE_FILE_SCAN_ENV}
        TEST: file_scan
      - ENV: ${SERVICE_PROMPT_GUARD_ENV}
        TEST: prompt_guard
      - ENV: ${SERVICE_REDACT_ENV}
        TEST: redact
      - ENV: ${SERVICE_SANITIZE_ENV}
        TEST: sanitize
      - ENV: ${SERVICE_VAULT_ENV}
        TEST: vault
      - ENV: ${SERVICE_SHARE_ENV}
        TEST: share
  script:
    - go test -count=1 -timeout=20m -tags integration -v ./service/${TEST}/...

sdk-lint:
  extends: .sdk-base
  stage: lint
  script:
    - make verify

sdk-generate-docs:
  extends: .sdk-base
  stage: lint
  allow_failure: true
  script:
    - make docgen
  artifacts:
    expire_in: 1 month
    expose_as: go_sdk
    paths: ["pangea-sdk/go_sdk.json"]
    when: on_success

sdk-unit-testing:
  extends: .sdk-base
  stage: unit_tests
  script:
    - make unit

sdk-publish:
  stage: publish
  variables:
    GOPROXY: proxy.golang.org
  script:
    - bash ./dev/validate_tag.sh "$CI_COMMIT_TAG"
    - go list -m github.com/pangeacyber/pangea-go/pangea-sdk@"$CI_COMMIT_TAG"
  rules:
    - if: $CI_COMMIT_TAG
